import argparse
import pandas

config = {
    'DATA' : {
        'input_position_file': "gwas20.txt",
        'vcf': "/lab/data/genomes/human/hg19/1000GenomesDownloads/ALL.chr{chrom}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
        'vcf_sampleInfo': "/lab/data/genomes/human/hg19/1000GenomesDownloads/igsr_3990samples_allPopulations.tsv",
        'chromsizes' : "/lab/data/reference/human/hg19/annot/hg19.chrom.sizes"
    },
    
    'PARAMETERS' : {
        'population_type': "Superpopulation code",  # Choose which column in vcf_sampleInfo file to subset samples on. Another option could be "Population code" to subest by population
        'population_code': "EUR",
        'output_directory': "intermediateFiles/ldbuddiesFrom1000g_nobed",  # Where output will be saved
        'output_string': "testchr20genoq_nobed", # output string for vcftools
        'ldwindow': 1000000,
        'r2': 0.99,
        'CHROM': "range(1, 23)"
    },
}

CHROM = eval(config['PARAMETERS']['CHROM'])

rule final_getLDproxies:
    """
    Workflow for getting LD proxies using vcftools with 1000g vcfs
    Options defined in config file
    Population codes or Superpopulation codes can be used to subset 1000g samples  
    Include this workflow as part of other workflow requiring proxies 
    """
    input:
        main = expand(os.path.join(config['PARAMETERS']['output_directory'], "{output_string}.proxies.dat"), output_string=config['PARAMETERS']['output_string']),

rule makeSampleFile:
    """Get 1000g samples based on the population selected """
    input:
        sampleInfo = config['DATA']['vcf_sampleInfo']
    output:
        samplefile = os.path.join(config['PARAMETERS']['output_directory'], "subsetSamples.txt")
    run:
        d = pandas.read_csv(input.sampleInfo, sep='\t')
        d = d[d[config['PARAMETERS']['population_type']] == config['PARAMETERS']['population_code']]
        d[['Sample name']].to_csv(output[0], header=False, index=False)

        
rule makeBedFile:
    """
    Using vcftools gets very slow since large vcf files are being read etc. Subset the vcf files to retain SNPs 
    within a certain distance (within which proxy SNPs have to be found, or LD window). 
    """
    input:
        posfile = config['DATA']['input_position_file'],
        chromsizes = config['DATA']['chromsizes'],
    output:
        bedfile = temp(os.path.join(config['PARAMETERS']['output_directory'], "ldwindow{ldwindow}.for.{out}.bed".format(out = config['PARAMETERS']['output_string'], ldwindow = config['PARAMETERS']['ldwindow']))),
    params:
        ldwindow = config['PARAMETERS']['ldwindow']
    shell:
        r"""
        echo -e "chrom\tstart\tend" > {output.bedfile} ;
        less {input.posfile} | awk  '{{print "chr"$1,$2-1,$2}}' OFS='\t' | bedtools slop -i - -g {input.chromsizes} -b {params.ldwindow} | sortBed -i - | mergeBed -i - | sed -e 's:chr::g'  >> {output.bedfile}
        """   
    
rule setup_vcfTools:
    input:
        snpfile = config['DATA']['vcf'],
        samplefile = rules.makeSampleFile.output.samplefile,
        posfile = config['DATA']['input_position_file'],
        bedfile = rules.makeBedFile.output.bedfile,
    output:
        os.path.join(config['PARAMETERS']['output_directory'], "{output_string}.chr{chrom}.list.geno.ld")
    params:
        outstring = os.path.join(config['PARAMETERS']['output_directory'], "{output_string}.chr{chrom}"),
        ldwindow = config['PARAMETERS']['ldwindow'],
        r2 = config['PARAMETERS']['r2'],
    shell:
        r"""
        vcftools --gzvcf {input.snpfile}  --keep {input.samplefile} --bed {input.bedfile} --remove-indels  --geno-r2-positions {input.posfile}  --ld-window-bp {params.ldwindow} --min-r2 {params.r2} --out {params.outstring}
        """

rule mergeWithOriginal:
    input:
        proxies = expand(os.path.join(config['PARAMETERS']['output_directory'], "{{output_string}}.chr{chrom}.list.geno.ld"), chrom=config['PARAMETERS']['CHROM']),
    output:
        main = os.path.join(config['PARAMETERS']['output_directory'], "{output_string}.proxies.dat"),
        tempfile = temp(os.path.join(config['PARAMETERS']['output_directory'], "{output_string}.proxies.dat.temp"))
    shell:
        r"""
        cat {input.proxies} | grep -v "R^2" | sort | uniq  > {output.tempfile} ;
        echo -e "CHR1\tPOS1\tCHR2\tPOS2\tN_INDV\tR^2" | cat - {output.tempfile} > {output.main}
        """

